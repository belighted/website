lang: en
slug: react-and-react-native-directories-management
originalPath: https://www.belighted.com/blog/react-and-react-native-directories-management
title: React and React Native Directories Management
author: Simon H.
description: How to create absolute pathways for React and React Native
  directories instead of relative. Step-by-step instructions and examples to
  handle folders and assets.
image: 1*NACus9WrUGcxW2cgxAxBTA.jpeg
date: 1483228800000
body: >-
  <p>If you use React or React Native, you may have noticed&nbsp;<span
  style="background-color: transparent;">your directory pathways sometimes look
  like this&nbsp;</span><span style="font-family: inherit; background-color:
  transparent;">when you want to import something from another folder inside
  your components:</span></p>

  <code>import NavigationBar from '../../../components/ui/NavigationBar;</code>

  <p><br>Those ‘../../..’ are a nightmare to handle in your project and can be a real mess when you want to keep your project maintanable for everyone.</p>

  <p>In this article, we will explore a better way to handle folders inside React and React native applications.</p>

  <!--more-->

  <p>First, lets talk about React directories. (You can&nbsp; jump&nbsp;<span>directly</span> to the part about&nbsp;<a href="#react-native">React native</a>&nbsp; directories, if you wish.)</p>

  <h4>React</h4>

  <p>In our projects we use webpack as a bundler for javascript. But the problem is that the directory path is relative, not absolute. I have found a really nice way to get rid of this relative path and change it to an absolute path.</p>

  <p>First, you’ll have to create your ‘webpack.config.js’ file and put your basic webpack configuration .<br>(You can find mine on the React project at the end of this article.)</p>

  <p>In Webpack 3.x, you have an object called <a href="https://webpack.js.org/configuration/resolve/#resolve" target="_blank">resolve</a>.</p>

  <p>Inside this object, we can use an object called <a href="https://webpack.js.org/configuration/resolve/#resolve-alias" target="_blank">alias</a>.</p>

  <p>The alias is the same as the one you can use inside a ‘bash_profile’ file. It’s a shortcut to handle your import more easily (it also works with require()).</p>

  <p>In our projects we use these aliases (not a complete list):</p>

  <code>const path = require('path');<br>...<br>module.exports = {<br>&nbsp; &nbsp;...<br>&nbsp; &nbsp;resolve: {<br>&nbsp; &nbsp;alias: {<br>&nbsp; &nbsp; &nbsp; Actions: path.resolve(__dirname, 'src/actions/'),<br>&nbsp; &nbsp; &nbsp; Components: path.resolve(__dirname, 'src/components/'),<br>&nbsp; &nbsp; &nbsp; ...<br>&nbsp; &nbsp; &nbsp; },<br>&nbsp; &nbsp;},<br>&nbsp; &nbsp;...<br>}</code>

  <p><br>The ‘src/components’ is the absolute link from your config file to your folder.</p>

  <p>Now that you have specified this in your config file, you can change your component from this:</p>

  <code>import NavigationBar from '../../../components/ui/NavigationBar';</code>

  <p><span style="font-family: inherit; background-color: transparent;"><br>to this:</span></p>

  <code>import NavigationBar from 'Components/ui/NavigationBar';</code>

  <p><br>Much better, right? And you can do it for other directories in addition to the one for React.</p>

  <p>If you are using Webpack 2.x, you can also use the <a href="https://webpack.github.io/docs/configuration.html#resolve-modulesdirectories" target="_blank">alias</a> inside the resolve.</p>

  <h4 id="react-native">React native</h4>

  <p>Inside React native, Metro bundler is the packager of the project. It behaves a little differently.</p>

  <p>You don’t need to create aliases. What you have to do is create a ‘package.json’ file at the root of the directory to be used with an absolute path.</p>

  <p>Inside the ‘package.json’ file, you have to name it. Your file will look like this:</p>

  <code>{<br>&nbsp; &nbsp;"name": "Reducers"<br>}</code>

  <p><span style="font-family: inherit; background-color: transparent;"><br>Here is an example of the architecture before:</span></p>

  <code>src/<br>&nbsp; &nbsp;|_ actions/<br>&nbsp; &nbsp;|_ assets/<br>&nbsp; &nbsp; &nbsp; |_ fonts/<br>&nbsp; &nbsp; &nbsp; |_ images/<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|_ branding/<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|_ placeholders/<br>&nbsp; &nbsp;|_ components/ <br>&nbsp; &nbsp; &nbsp; |_ ui/<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|_ NavigationBar.js<br>&nbsp; &nbsp; &nbsp; |_ commons/<br>&nbsp; &nbsp;|_ configs/<br>&nbsp; &nbsp; &nbsp; |_ firebase<br>&nbsp; &nbsp; &nbsp; |_ routes<br>&nbsp; &nbsp;|_ containers/<br>&nbsp; &nbsp;|_ helpers/<br>&nbsp; &nbsp;|_ reducers/<br>&nbsp; &nbsp;|_ styles/<br>&nbsp; &nbsp;|_ types/<br>package.json</code>

  <p><br>And here is the architecture after:</p>

  <p><code>src/<br>&nbsp; &nbsp;|_ actions/<br>&nbsp; &nbsp;|_ assets/<br>&nbsp; &nbsp; &nbsp; |_ fonts/<br>&nbsp; &nbsp; &nbsp; |_ images/<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|_ branding/<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|_ placeholders/<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|_ package.json<br>&nbsp; &nbsp;|_ components/ <br>&nbsp; &nbsp; &nbsp; |_ ui/<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|_ NavigationBar.js<br>&nbsp; &nbsp; &nbsp; |_ commons/<br>&nbsp; &nbsp; &nbsp; |_ package.json<br>&nbsp; &nbsp;|_ configs/<br>&nbsp; &nbsp; &nbsp; |_ firebase<br>&nbsp; &nbsp; &nbsp; |_ routes<br>&nbsp; &nbsp;|_ containers/<br>&nbsp; &nbsp;|_ helpers/<br>&nbsp; &nbsp;|_ reducers/<br>&nbsp; &nbsp;|_ styles/<br>&nbsp; &nbsp;|_ types/<br>package.json</code></p>

  <p>You can read up on the documentation for the naming of your <a href="https://docs.npmjs.com/files/package.json#name" target="_blank">package.json name</a> files.</p>

  <h4>Bonus</h4>

  <p>Here is a way to handle your assets inside the application.</p>

  <p>The React Native documentation tells you that you can use ‘require()’ for your various images.</p>

  <code>&lt;Image source={require('../assets/images/branding/logo.png')} /&gt;</code>

  <p><span style="font-family: inherit; background-color: transparent;"><br>But the directory path is still not great, as we saw before. Let's walk through how to improve it step by step below.</span></p>

  <h4>Step 1:</h4>

  <p>First we move the require inside a variable. While this is a good start, at this point we're just moving the problem to a different location in the same file.</p>

  <code>const logo = require('../../assets/images/logo.png');<br>...<br>&lt;Image source={logo} /&gt;</code>

  <h4><br>Step 2:</h4>

  <p>Next, we create a file that’s going to handle the images for us. Then we can use the file in several locations.</p>

  <code><strong>images.js</strong><br><br>const logo = require('./logo.png');<br><br>const Images = {<br>&nbsp; &nbsp;logo,<br>};<br><br>export default Images;<br><br><strong>container.js</strong><br><br>import Images from '../assets/Images';<br>...<br>&lt;Image source={Images.logo} /&gt;</code>

  <p><span style="font-family: inherit; background-color: transparent;"><br>It’s getting better but we still have this relative link. If we apply the technique that we talked about earlier, we can create an absolute link that we can use directly.</span></p>

  <h4>Step 3</h4>

  <code>import Images from '@assets/Images';<br>...<br>&lt;Image source={Images.logo} /&gt;</code>

  <p><br>Now, the absolute links are going to remain valid even if we move our assets directory or the component for any reason.&nbsp; A relative link would mean changing the import everywhere.</p>

  <p>You only have to deal with the images inside the ‘images.js’ file.&nbsp;</p>

  <h4>Examples</h4>

  <p>You can find examples for React and React Native management on Belighted’s Github right here:</p>

  <ul>

  <li><strong><a href="https://github.com/belighted/react-management" target="_blank">React</a></strong></li>

  <li><strong><a href="https://github.com/belighted/react-native-management" target="_blank">React native</a></strong></li>

  </ul>

  <p>I hope you've found this helpful. If you have a minute, please share it and spread the word for better directories management!<br><br><!--HubSpot Call-to-Action Code --><span class="hs-cta-wrapper" id="hs-cta-wrapper-fb3606cc-cc1b-47d0-ae85-2c9f69837fe2"><span class="hs-cta-node hs-cta-fb3606cc-cc1b-47d0-ae85-2c9f69837fe2" id="hs-cta-fb3606cc-cc1b-47d0-ae85-2c9f69837fe2"><!--[if lte IE 8]><div id="hs-cta-ie-element"></div><![endif]--><a href="https://cta-redirect.hubspot.com/cta/redirect/1684659/fb3606cc-cc1b-47d0-ae85-2c9f69837fe2" target="_blank"><img class="hs-cta-img" id="hs-cta-img-fb3606cc-cc1b-47d0-ae85-2c9f69837fe2" style="border-width:0px;" src="https://no-cache.hubspot.com/cta/default/1684659/fb3606cc-cc1b-47d0-ae85-2c9f69837fe2.png" alt="New Call-to-action"></a></span></span><!-- end HubSpot Call-to-Action Code --></p>
tags:
  - label: Under the hood
    value: under-the-hood

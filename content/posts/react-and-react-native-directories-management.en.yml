lang: "en"
slug: "react-and-react-native-directories-management"
originalPath: "https://www.belighted.com/blog/react-and-react-native-directories-management"
article:
  title: "React and React Native Directories Management"
  content: "<span id=\"hs_cos_wrapper_post_body\" class=\"hs_cos_wrapper hs_cos_wrapper_meta_field hs_cos_wrapper_type_rich_text\" data-hs-cos-general-type=\"meta_field\" data-hs-cos-type=\"rich_text\"><p>If you use React or React Native, you may have noticed&nbsp;<span>your directory pathways sometimes look like this&nbsp;</span><span>when you want to import something from another folder inside your components:</span></p>\n<code>import NavigationBar from '../../../components/ui/NavigationBar;</code>\n<p><br>Those ‘../../..’ are a nightmare to handle in your project and can be a real mess when you want to keep your project maintanable for everyone.</p>\n<p>In this article, we will explore a better way to handle folders inside React and React native applications.</p>\n<!--more-->\n<p>First, lets talk about React directories. (You can&nbsp; jump&nbsp;<span>directly</span> to the part about&nbsp;<a href=\"https://www.belighted.com/blog/react-and-react-native-directories-management#react-native\">React native</a>&nbsp; directories, if you wish.)</p>\n<h4>React</h4>\n<p>In our projects we use webpack as a bundler for javascript. But the problem is that the directory path is relative, not absolute. I have found a really nice way to get rid of this relative path and change it to an absolute path.</p>\n<p>First, you’ll have to create your ‘webpack.config.js’ file and put your basic webpack configuration .<br>(You can find mine on the React project at the end of this article.)</p>\n<p>In Webpack 3.x, you have an object called <a href=\"https://webpack.js.org/configuration/resolve/#resolve\" target=\"_blank\">resolve</a>.</p>\n<p>Inside this object, we can use an object called <a href=\"https://webpack.js.org/configuration/resolve/#resolve-alias\" target=\"_blank\">alias</a>.</p>\n<p>The alias is the same as the one you can use inside a ‘bash_profile’ file. It’s a shortcut to handle your import more easily (it also works with require()).</p>\n<p>In our projects we use these aliases (not a complete list):</p>\n<code>const path = require('path');<br>...<br>module.exports = {<br>...<br>resolve: {<br>alias: {<br>Actions: path.resolve(__dirname, 'src/actions/'),<br>Components: path.resolve(__dirname, 'src/components/'),<br>...<br>},<br>},<br>...<br>}</code>\n<p><br>The ‘src/components’ is the absolute link from your config file to your folder.</p>\n<p>Now that you have specified this in your config file, you can change your component from this:</p>\n<code>import NavigationBar from '../../../components/ui/NavigationBar';</code>\n<p><span><br>to this:</span></p>\n<code>import NavigationBar from 'Components/ui/NavigationBar';</code>\n<p><br>Much better, right? And you can do it for other directories in addition to the one for React.</p>\n<p>If you are using Webpack 2.x, you can also use the <a href=\"https://webpack.github.io/docs/configuration.html#resolve-modulesdirectories\" target=\"_blank\">alias</a> inside the resolve.</p>\n<h4 id=\"react-native\">React native</h4>\n<p>Inside React native, Metro bundler is the packager of the project. It behaves a little differently.</p>\n<p>You don’t need to create aliases. What you have to do is create a ‘package.json’ file at the root of the directory to be used with an absolute path.</p>\n<p>Inside the ‘package.json’ file, you have to name it. Your file will look like this:</p>\n<code>{<br>\"name\": \"Reducers\"<br>}</code>\n<p><span><br>Here is an example of the architecture before:</span></p>\n<code>src/<br>|_ actions/<br>|_ assets/<br>|_ fonts/<br>|_ images/<br>|_ branding/<br>|_ placeholders/<br>|_ components/ <br>|_ ui/<br>|_ NavigationBar.js<br>|_ commons/<br>|_ configs/<br>|_ firebase<br>|_ routes<br>|_ containers/<br>|_ helpers/<br>|_ reducers/<br>|_ styles/<br>|_ types/<br>package.json</code>\n<p><br>And here is the architecture after:</p>\n<p><code>src/<br>|_ actions/<br>|_ assets/<br>|_ fonts/<br>|_ images/<br>|_ branding/<br>|_ placeholders/<br>|_ package.json<br>|_ components/ <br>|_ ui/<br>|_ NavigationBar.js<br>|_ commons/<br>|_ package.json<br>|_ configs/<br>|_ firebase<br>|_ routes<br>|_ containers/<br>|_ helpers/<br>|_ reducers/<br>|_ styles/<br>|_ types/<br>package.json</code></p>\n<p>You can read up on the documentation for the naming of your <a href=\"https://docs.npmjs.com/files/package.json#name\" target=\"_blank\">package.json name</a> files.</p>\n<h4>Bonus</h4>\n<p>Here is a way to handle your assets inside the application.</p>\n<p>The React Native documentation tells you that you can use ‘require()’ for your various images.</p>\n<code>&lt;Image source={require('../assets/images/branding/logo.png')} /&gt;</code>\n<p><span><br>But the directory path is still not great, as we saw before. Let's walk through how to improve it step by step below.</span></p>\n<h4>Step 1:</h4>\n<p>First we move the require inside a variable. While this is a good start, at this point we're just moving the problem to a different location in the same file.</p>\n<code>const logo = require('../../assets/images/logo.png');<br>...<br>&lt;Image source={logo} /&gt;</code>\n<h4><br>Step 2:</h4>\n<p>Next, we create a file that’s going to handle the images for us. Then we can use the file in several locations.</p>\n<code><strong>images.js</strong><br>const logo = require('./logo.png');<br>const Images = {<br>logo,<br>};<br>export default Images;<br><strong>container.js</strong><br>import Images from '../assets/Images';<br>...<br>&lt;Image source={Images.logo} /&gt;</code>\n<p><span><br>It’s getting better but we still have this relative link. If we apply the technique that we talked about earlier, we can create an absolute link that we can use directly.</span></p>\n<h4>Step 3</h4>\n<code>import Images from '@assets/Images';<br>...<br>&lt;Image source={Images.logo} /&gt;</code>\n<p><br>Now, the absolute links are going to remain valid even if we move our assets directory or the component for any reason.&nbsp; A relative link would mean changing the import everywhere.</p>\n<p>You only have to deal with the images inside the ‘images.js’ file.&nbsp;</p>\n<h4>Examples</h4>\n<p>You can find examples for React and React Native management on Belighted’s Github right here:</p>\n\n<p>I hope you've found this helpful. If you have a minute, please share it and spread the word for better directories management!<br><!--HubSpot Call-to-Action Code --><span class=\"hs-cta-wrapper\" id=\"hs-cta-wrapper-fb3606cc-cc1b-47d0-ae85-2c9f69837fe2\"><span class=\"hs-cta-node hs-cta-fb3606cc-cc1b-47d0-ae85-2c9f69837fe2\" id=\"hs-cta-fb3606cc-cc1b-47d0-ae85-2c9f69837fe2\"><!--[if lte IE 8]><div id=\"hs-cta-ie-element\"></div><![endif]--><a href=\"https://cta-redirect.hubspot.com/cta/redirect/1684659/fb3606cc-cc1b-47d0-ae85-2c9f69837fe2\" target=\"_blank\"><img class=\"hs-cta-img\" id=\"hs-cta-img-fb3606cc-cc1b-47d0-ae85-2c9f69837fe2\" src=\"https://no-cache.hubspot.com/cta/default/1684659/fb3606cc-cc1b-47d0-ae85-2c9f69837fe2.png\" alt=\"New Call-to-action\"></a></span></span><!-- end HubSpot Call-to-Action Code --></p></span>"
  textBody: ""
  html: "<!--<![endif]--><head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"author\" content=\"Simon H.\">\n    <meta name=\"description\" content=\"How to create absolute pathways for React and React Native directories instead of relative. Step-by-step instructions and examples to handle folders and assets.\">\n    <meta name=\"generator\" content=\"HubSpot\">\n    <title>React and React Native Directories Management</title>\n    <link rel=\"shortcut icon\" href=\"https://www.belighted.com/hubfs/logo-belighted.png\">\n    \n\n    \n\n    <meta property=\"og:description\" content=\"How to create absolute pathways for React and React Native directories instead of relative. Step-by-step instructions and examples to handle folders and assets.\">\n    <meta property=\"og:title\" content=\"React and React Native Directories Management\">\n    <meta name=\"twitter:description\" content=\"How to create absolute pathways for React and React Native directories instead of relative. Step-by-step instructions and examples to handle folders and assets.\">\n    <meta name=\"twitter:title\" content=\"React and React Native Directories Management\">\n\n\n    <style>\na.cta_button{-moz-box-sizing:content-box !important;-webkit-box-sizing:content-box !important;box-sizing:content-box !important;vertical-align:middle}.hs-breadcrumb-menu{list-style-type:none;margin:0px 0px 0px 0px;padding:0px 0px 0px 0px}.hs-breadcrumb-menu-item{float:left;padding:10px 0px 10px 10px}.hs-breadcrumb-menu-divider:before{content:'›';padding-left:10px}.hs-featured-image-link{border:0}.hs-featured-image{float:right;margin:0 0 20px 20px;max-width:50%}@media (max-width: 568px){.hs-featured-image{float:none;margin:0;width:100%;max-width:100%}}.hs-screen-reader-text{clip:rect(1px, 1px, 1px, 1px);height:1px;overflow:hidden;position:absolute !important;width:1px}\n</style>\n\n<link rel=\"stylesheet\" href=\"/hs/hsstatic/AsyncSupport/static-1.70/sass/comments_listing_asset.css\">\n<link rel=\"stylesheet\" href=\"/hs/hsstatic/AsyncSupport/static-1.70/sass/rss_post_listing.css\">\n    \n\n    \n    \n\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n\n<!-- Facebook Pixel Code -->\n\n<noscript>&lt;img  height=\"1\" width=\"1\" style=\"display:none\" src=\"https://www.facebook.com/tr?id=706355809571598&amp;amp;ev=PageView&amp;amp;noscript=1\"&gt;</noscript>\n<!-- End Facebook Pixel Code -->\n<link rel=\"amphtml\" href=\"https://www.belighted.com/blog/react-and-react-native-directories-management?hs_amp=true\">\n\n<meta property=\"og:image\" content=\"https://cdn-images-1.medium.com/max/1600/1*NACus9WrUGcxW2cgxAxBTA.jpeg#keepProtocol\">\n<meta property=\"og:image:width\" content=\"1600\">\n<meta property=\"og:image:height\" content=\"1066\">\n\n<meta name=\"twitter:image\" content=\"https://cdn-images-1.medium.com/max/1600/1*NACus9WrUGcxW2cgxAxBTA.jpeg#keepProtocol\">\n\n\n<meta property=\"og:url\" content=\"https://www.belighted.com/blog/react-and-react-native-directories-management\">\n<meta name=\"twitter:card\" content=\"summary_large_image\">\n\n<link rel=\"canonical\" href=\"https://www.belighted.com/blog/react-and-react-native-directories-management\">\n\n<meta property=\"og:type\" content=\"article\">\n<link rel=\"alternate\" type=\"application/rss+xml\" href=\"https://www.belighted.com/blog/rss.xml\">\n<meta name=\"twitter:domain\" content=\"www.belighted.com\">\n\n\n<meta http-equiv=\"content-language\" content=\"en\">\n<link rel=\"stylesheet\" href=\"//cdn2.hubspot.net/hub/-1/hub_generated/template_assets/1495141902003/hubspot_default/shared/responsive/layout.min.css\">\n\n\n<link rel=\"stylesheet\" href=\"https://www.belighted.com/hs-fs/hub/1684659/hub_generated/template_assets/8523445462/1569881984337/Marketplace/Neambo/Act21/Coded_Files/Act21.min.css\">\n\n\n\n\n</head>\n<body class=\"blog-1 featured-image-right   hs-content-id-5452681556 hs-blog-post hs-blog-id-4544204069\" style=\"\"></body>"

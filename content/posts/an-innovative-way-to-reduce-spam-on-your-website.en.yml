lang: en
slug: an-innovative-way-to-reduce-spam-on-your-website
originalPath: https://www.belighted.com/blog/an-innovative-way-to-reduce-spam-on-your-website
title: An innovative way to reduce spam on your website
author: Philippe B.
description: We introduce here an innovative way to handle the flow of unwanted
  e-mails through a new anti-spam technique in replacement of the well-known
  CAPTCHA.
image: images/289348-grum-spambot-shut-down-massive-botnet-created-18-percent-of-worlds-spa.jpg
date: 1420070400000
body: >-
  <h2>What we wanted</h2>

  <p>As you may have noticed, we’ve recently launched our brand new website. And as a web development agency, the contact form is our primary channel for leads creation. We wanted to keep it as simple as possible to let our customers get in touch with us without any unnecessary hassle.</p>

  <!--more-->

  <h2>The issue</h2>

  <p>The contact form was quickly used by spammers, filling our inbox with unwanted and useless e-mails, and costing us time and energy to handle.</p>

  <h2>Existing solution</h2>

  <p>The most common way to avoid those annoying e-mails is to use CAPTCHAs, because users are familiar with it. However we didn’t want to force our customers to fill in this additional input: the user could be driven to stop his action because of this too complicated contact form.</p>

  <h2>Our solution</h2>

  <p>After some research, we found out that since bots are basically computers they manage to visit our website and send a successful contact request in less than 5 seconds. Our idea was to set a timer, in order to block the requests that are suspicious.</p>

  <p>In your Rails app, this means adding the following code to the application configuration:</p>

  <pre><code class="ruby"><span class="comment">#config/application.rb</span>

  <span class="constant">Rails</span>.application.config.antispam_timer = <span class="number">30</span>

  </code></pre>

  <p>In our case, the number the antispam_timer is set to 30 seconds. You can now add time-related information to the user session in your application controller using a before_filter, like this:</p>

  <pre><code class="ruby"><span class="comment">#controllers/application.rb</span>

  <span class="class"><span class="keyword">class</span> <span class="title">ApplicationController</span> <span class="inheritance">&lt; <span class="parent">ActionController::Base</span></span></span>
     before_filter <span class="symbol">:anti_spam</span>

      <span class="function"><span class="keyword">def</span> <span class="title">anti_spam</span></span>
       session[<span class="string">'antispam_timer'</span>] ||= <span class="constant">Time</span>.now
      <span class="keyword">end</span>

  <span class="keyword">end</span>

  </code></pre>

  <p>Finally, you can use this information in your contact request controller. This is how we used it:</p>

  <pre><code class="ruby"><span class="class"><span class="keyword">class</span> <span class="title">ContactRequestsController</span> <span class="inheritance">&lt; <span class="parent">ApplicationController</span></span></span>
    <span class="function"><span class="keyword">def</span> <span class="title">create</span></span>
      <span class="comment"># checking for contact spam</span>
      contact_spam = <span class="keyword">false</span>
      time_to_comment = <span class="constant">Time</span>.now.to_time - session[<span class="string">'antispam_timer'</span>].to_time
      <span class="keyword">if</span> time_to_comment &lt; <span class="constant">Rails</span>.application.config.antispam_timer
        spam_logger.warn(<span class="string">"There is potential spam detected
            for IP <span class="subst">#{request.env[<span class="string">'REMOTE_ADDR'</span>]}</span>. Antispam
            threshold not reached (took <span class="subst">#{time_to_comment.to_i}</span>s)."</span>)
        spam_logger.warn(<span class="string">"Params were : <span class="subst">#{params}</span>"</span>)
        contact_spam = <span class="keyword">true</span>
      <span class="keyword">end</span>
      <span class="comment"># U can use the contact_spam boolean to check </span>
          <span class="comment"># if you have to send or not your mail. </span>
  <span class="keyword">end</span>

  </code></pre>

  <p>For your information, there exists another solution, implemented in a Rails gem: <a href="https://github.com/curtis/honeypot-captcha">Honeypot CAPTCHA</a>. Practically, it adds a hidden field in your form that must stay empty as the user isn’t able to see it, but that bots will actually fill. Then in your backend controller you can easily check if the request is coming from a real user or from a bot.</p>

  <p><br><!--HubSpot Call-to-Action Code --><span class="hs-cta-wrapper" id="hs-cta-wrapper-fb3606cc-cc1b-47d0-ae85-2c9f69837fe2"><span class="hs-cta-node hs-cta-fb3606cc-cc1b-47d0-ae85-2c9f69837fe2" id="hs-cta-fb3606cc-cc1b-47d0-ae85-2c9f69837fe2"><!--[if lte IE 8]><div id="hs-cta-ie-element"></div><![endif]--><a href="https://cta-redirect.hubspot.com/cta/redirect/1684659/fb3606cc-cc1b-47d0-ae85-2c9f69837fe2" target="_blank"><img class="hs-cta-img" id="hs-cta-img-fb3606cc-cc1b-47d0-ae85-2c9f69837fe2" style="border-width:0px;" src="https://no-cache.hubspot.com/cta/default/1684659/fb3606cc-cc1b-47d0-ae85-2c9f69837fe2.png" alt="New Call-to-action"></a></span></span><!-- end HubSpot Call-to-Action Code --></p>

  <div id="disqus_thread">&nbsp;</div>
tags:
  - label: Under the hood
    value: under-the-hood

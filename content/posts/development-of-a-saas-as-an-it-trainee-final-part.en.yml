lang: en
slug: development-of-a-saas-as-an-it-trainee-final-part
originalPath: https://www.belighted.com/blog/development-of-a-saas-as-an-it-trainee-final-part
title: "Development of a SaaS as an IT trainee : final part"
author: Samuel M.
description: My last weeks among the Belighters, last work on Pravatar and Scale.
image: ./images/trainee-final-blog-bpost-image.jpg
date: 1451606400000
body: >-
  <h2>Introduction</h2>

  <p>It's already the end of my internship at Belighted, last weeks passed amazingly quickly.</p>

  <!--more-->

  <p>I'd like to thank so much all the Belighters for their particularly warm welcome, and all the things and advice they gave to me.<br> Especially Philippe who was my internship mentor and taught me a huge amount of numerous things about good practises, design pattern, RESTful architecture, testing (a lot about testing), etc ...</p>

  <p>It's kinda funny to take a look again at the code of my first school project in Rails. This is making me realize how much Belighted made me progress.</p>

  <p>Let's now talk about what I did and learnt during these last weeks.</p>

  <h2>Implementing Pravatar on Scale</h2>

  <p>Scale is one of Belighted's project.<br> It's a resource managment system <strong><a href="/saas-guide-to-software-as-service" rel=" noopener" target="_blank">SaaS </a></strong>designed for digital agencies.</p>

  <p>Scale has no avatar management except Gravatar, this is what led to the idea of Pravatar.<br> That idea is providing Scale with a separate avatar system, then re-use it on other projects needing avatars, and eventually making it available for external projects.</p>

  <p>So once I made Pravatar working, and tested it on an other project including the dedicated <strong>gem</strong> and javascript <strong>snippet</strong>, it was the time to make the final test, running Pravatar on Scale !</p>

  <h3>The available tools</h3>

  <p>During this work on Pravatar, I built these tools in order to make clients able to use the services :</p>

  <ul>

  <li><strong>API</strong> : An API following the JSON API specification.</li>

  <li><strong>Script</strong> : Included in a <code>&lt;script&gt;</code> tag by the client, which can then use Pravatar feature simply by using some <code>data-purpose</code> attributes in the HTML.</li>

  <li><strong>Gem</strong> : Working alongside the script, the gem is simplifying the process a step further, providing two simple, concise and configurable helpers for displaying and uploading Pravatar features.</li>

  </ul>

  <p>Equipped with these tools, next step was to discover Scale codebase and figure out how to set up Pravatar.</p>

  <h3>Scale analysis</h3>

  <p>At first glance, Scale quite frightened me because it was something I never saw before.<br> I was expecting some simple Rails structure with just an app folder containing the <code>mvc</code> folders and nothing more, so I could just insert the snippet in the classic <code>application.html.erb</code> file, then put the gem in the gemfile and raise my hand telling I was finished with this.<br> How naive was I ! However, looking at it today, I'm <strong>so much</strong> more satisfied that it hasn't been that easy.</p>

  <p>So, Scale was in fact an <em>AngularJS</em> single-page app served by the Rails backend app.<br> I didn't understand how exactly AngularJS is running with Rails in Scale, but I quickly understood that I would have to work only with Angular. So I took some days to learn Angular after analyzing the code.</p>

  <h3>The tools and Scale</h3>

  <p>Equipped with my new knowledge of AngularJS, I was able to review the usability of my tools inside the project.</p>

  <h4>Javascript Snippet</h4>

  <p>The main problem with my snippet was that I based all the functionnalities on the <code>$document.ready()</code> event, which was fine with a "stateless" web-app like my Rails demo, but totally <strong>not</strong> with an Angular "stateful" one !</p>

  <p>So I updated that script by providing my functionnality inside a <em>Pravatar</em> object attached to the <code>window</code> by the script.<br> But it didn't worked well anyway, moreover it seemed quite ugly to me to mix up my script with angular and brutalize its logical process with my functions.</p>

  <p>In conclusion, the snippet wasn't designed for that kind of project.<br> Even if I would have been able to make it work with Angular, I'm still not sure about how good it would have been.</p>

  <h4>The Rails Gem</h4>

  <p>My failure with the snippet was implying that I could not use the gem, because it was designed to work alongside it !</p>

  <p>Anyway, even if the snippet would have been totally fine, the gem would have been constituing a source of issues.</p>

  <p>The Pravatar gem has <code>JWT gem</code> as a dependency.<br> Trying to <code>bundle install</code> Pravatar gem on Scale led to a monumental amount of <strong>sub-dependecies versions conflicts</strong>, solving these conflicts by upgrading these dependencies could have made Scale totally unstable for whichever gem version update.</p>

  <h4>Pravatar API</h4>

  <p>This was the only option left to make Pravatar works on Scale, and probably the <strong>best</strong>.</p>

  <p>If I managed to build a script using this API to run the service, the thing was totally achievable by using that API with AngularJS despite my lack of experience and my brand-new newbie knowledge about it.</p>

  <h3>Implementation</h3>

  <p>The only parts of Scale that I had to focus onto were the avatars.</p>

  <p>As the avatars were only displayed (no update/upload options), I rapidly found out that all of the avatar displays on Scale were achieved by the same <code>directive</code>.</p>

  <p>In order to use my Pravatar API, I had to build a <code>PravatarProvider</code> which would be initialized with the <em>apiKey</em>, the <em>projectName</em> and the <em>pravatarUrl</em>.<br> This provider would then expose two functions, a <code>load</code> one for loading the avatar from a profile id, and an <code>upload</code> one for uploading a new avatar with base64 image data and the profile's id.</p>

  <p>As the display zone for avatars was perfectly designed, the result of a fetched Pravatar was marvelously fitting in it.<br> As the upload function wasn't implemented before, it took me a bit of time to design something intuitive for the users.<br> But with the advice of Simon, and re-using some <em>loading-effect</em> element of Scale, I managed to achieve a stylish upload feature on Scale.</p>

  <p>Like usual, it seems really simple now, but it took me some time to figure out how Angular was working and become confident with it.</p>

  <h2>Conclusion</h2>

  <p>These fifteen weeks were really awesome, so much new experience and stuff to learn, some beers with the Belighters, being happy to go there every day !</p>

  <p>I really hope that the Pravatar stuff will be useful to Belighted in some ways and that I achieved good work for them, as they gave me a lot in counterpart.</p>

  <p>That experience confirmed my will to pursue in the web development area, and I feel really lucky to have made that internship in such a good company wich such nice people.</p>

  <p>Thank you again Belighted !<br><br><!--HubSpot Call-to-Action Code --><span class="hs-cta-wrapper" id="hs-cta-wrapper-fb3606cc-cc1b-47d0-ae85-2c9f69837fe2"><span class="hs-cta-node hs-cta-fb3606cc-cc1b-47d0-ae85-2c9f69837fe2" id="hs-cta-fb3606cc-cc1b-47d0-ae85-2c9f69837fe2"><!--[if lte IE 8]><div id="hs-cta-ie-element"></div><![endif]--><a href="https://cta-redirect.hubspot.com/cta/redirect/1684659/fb3606cc-cc1b-47d0-ae85-2c9f69837fe2" target="_blank"><img class="hs-cta-img" id="hs-cta-img-fb3606cc-cc1b-47d0-ae85-2c9f69837fe2" style="border-width:0px;" src="https://no-cache.hubspot.com/cta/default/1684659/fb3606cc-cc1b-47d0-ae85-2c9f69837fe2.png" alt="New Call-to-action"></a></span></span><!-- end HubSpot Call-to-Action Code --></p>

  <div id="disqus_thread">&nbsp;</div>
tags:
  - label: Under the hood
    value: under-the-hood

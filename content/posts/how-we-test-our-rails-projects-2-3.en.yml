lang: "en"
slug: "how-we-test-our-rails-projects-2-3"
originalPath: "https://www.belighted.com/blog/how-we-test-our-rails-projects-2-3"
article:
  title: "How we test our Rails projects (2/3)"
  content: "<span id=\"hs_cos_wrapper_post_body\" class=\"hs_cos_wrapper hs_cos_wrapper_meta_field hs_cos_wrapper_type_rich_text\" data-hs-cos-general-type=\"meta_field\" data-hs-cos-type=\"rich_text\"><h2>Introduction</h2>\n<p>This blog post is the second of a series of 3 articles explaining how we write automatic tests for our Rails projects.</p>\n<!--more-->\n<p>The 3 parts discuss the following topics :</p>\n\n<h2>Part 2 : The structure</h2>\n<h3>/spec</h3>\n<p>Since we are using RSpec, we won't be using the <code>test</code> folder but the <code>spec</code> one.</p>\n<p>This folder will keep all our example files (an example is any kind of automatic test in RSpec terms), but also code and assets specific to our tests. More precisely there will be 3 subfolders dedicated to store files helping our examples and as many folders storing example files.</p>\n<p>The 3 sub folders containing helping files are :</p>\n<ul>\n<li><code>factories</code> : Where we put <code>FactoryGirl</code> factory definitions. Usually one file by object tree we need to build.</li>\n<li><code>resources</code> : Where we put static files we need in our examples. Those can be files we need to simulate an upload, files we need to compare with the result of a file generation, picture files we need to populate avatars of our users, etc. When we need a file to be used as-is without the need of parsing it, we will put it there.</li>\n<li><code>support</code> : Where we put all the supporting code for our test environment. This is the biggest one of the three and has its own sub structure.</li>\n</ul>\n<p>The other subdirectories will <em>mostly</em> mimic the structure of your <code>app</code> folder. We usually follow a structure of <em>stereotyped folders</em> ( the rails way ) for the common code and <a href=\"http://belighted.com/blog/organize-rails-files-by-topic\"><em>topic folders</em></a> for specific code. Thus if we have the subfolders <code>app/models/user.rb</code>, <code>app/api_clients/twilio_client.rb</code>, and <code>app/invoicing/invoice.rb</code> files, we will have the <code>spec/models/user_spec.rb</code>, <code>spec/api_clients/twilio_client_spec.rb</code> and <code>spec/invoicing/invoice_spec.rb</code>.</p>\n<p>I said <em>mostly</em> because there is one additional folder in <code>spec</code> which does not appear in the <code>app</code> folder : the <code>features</code> folder.</p>\n<h3>/spec/features</h3>\n<p>This folder is where we put our <a href=\"http://paulmarin.net/wp-content/uploads/2015/12/you-dont-say.jpg\">feature specs</a>.</p>\n<p>We have tried using special tools like <a href=\"https://cucumber.io/\">Cucumber</a> for our feature specs. It turns out for us that the cost of an additional tool and an additional language is not worth the effort. Especially since, <em>in our usual projects</em>, the product owner almost never read the user stories, even less writes them; the project manager is responsible for translating the needs to the developer and the developer writes and maintains the stories. Therefore we wanted a tool making the task easy for the developer and the combination of RSpec, SitePrism and Capybara is the best we have found to enable the developers to feel at home.</p>\n<p>This folder hosts the feature specs but what does our feature specs looks like ?</p>\n<p>Our files (code and specs) are always structured to hoist the important parts at the top of the file and the boilerplate at the bottom. For our feature specs this means that the file has a short name matching its file name allowing us to easily jump on them in our editor, then has a longer description in the form of a user story, then the code really begins.</p>\n<p>The code starts with the inclusion of the required shared_contexts for setting up a coarse grained state of the app, then a background block calling some private methods for a more fine grained initial setup.</p>\n<p>Then we have the scenarios. Each scenario has a short descriptive name allowing us to differentiate it from the other scenarios of the same feature (meaning a feature file with a single scenario can have a very simple name). The scenario starts by calling some private methods to put the application in the exact state required for that scenario. Then we have a succession of private method calls written to look like sentences. Active first person sentences are used to describe how the user interacts with the application. Passive sentences are used to describe assertions made in order to continue or fail the examples. Other active sentences are used to describe external actions happening.</p>\n<p>This technique is very simple and gets almost all the benefits from tools like cucumber without the hassle of them. As developers we are not at all disturbed by the snake case transformation of the sentences and the 3 simple gramatical rules enable us to immediately know what kind of <em>step</em> we are in.</p>\n<p>After the scenarios we enter the <code>private</code> area where we can have test values in the form of <code>let()</code> calls and the definition of all the private methods we have called earlier.</p>\n<p>Here is an example illustrating all these concepts :</p>\n<p>We imagine a story where a new client must have its ticket payment validated before downloading its concert ticket.</p>\n<pre><code class=\"ruby\">\n<span class=\"keyword\">require</span> <span class=\"string\">'rails_helper'</span>\n\n<span class=\"constant\">RSpec</span>.feature <span class=\"string\">'a user who has bought ticket using bank transfer want to download its ticket'</span>, <span class=\"string\">'\n  As a User having bought concert tickets using bank transfer\n  In order to be able to enter in the concert room\n  I want to download my tickets\n'</span> <span class=\"keyword\">do</span>\n\n  include_context <span class=\"string\">'users exist'</span>\n  include_context <span class=\"string\">'concert exist'</span>\n  include_context(<span class=\"string\">'a ticket has been bought using bank transfer'</span>) <span class=\"keyword\">do</span>\n    let(<span class=\"symbol\">:ticket_concert</span>){ concert }\n    let(<span class=\"symbol\">:ticket_buyer</span>){ client }\n  <span class=\"keyword\">end</span>\n\n  background <span class=\"keyword\">do</span>\n    free_some_seats_for_the_concert\n  <span class=\"keyword\">end</span>\n\n  scenario <span class=\"string\">'I can download my tickets after an admin validation'</span>, <span class=\"symbol\">:js</span>  <span class=\"keyword\">do</span>\n\n    as(client) <span class=\"keyword\">do</span>\n      i_go_to_my_dashboard\n      i_go_to_the_details_of_my_account\n      my_ticket_is_not_available_until_my_payment_has_been_validated\n    <span class=\"keyword\">end</span>\n\n    as(admin) <span class=\"keyword\">do</span>\n      i_go_to_the_admin_panel\n      i_display_the_first_pending_payment\n      i_validate_the_bank_transfer_payment\n    <span class=\"keyword\">end</span>\n\n    as(client) <span class=\"keyword\">do</span>\n      i_follow_the_email_annoucing_me_my_ticket_is_available\n      i_download_my_ticket\n    <span class=\"keyword\">end</span>\n\n    one_less_seat_is_available_for_the_concert\n\n  <span class=\"keyword\">end</span>\n\n  private\n  ...\n<span class=\"keyword\">end</span>   \n</code></pre>\n<p>As you can see, the scenario is quite easy to follow and when we read a sentence we can immediately know if it is a user action step ( <code>i_go_to_my_dashboard</code> ), an assertion step (<code>my_ticket_is_not_available_until_my_payment_has_been_validated</code>) or an external action step ( <code>free_some_seats_for_the_concert</code> ).</p>\n<p>The question you are probably asking yourself is : \"But where is the code ?\". The code appears after the <code>private</code> keyword. we have a list of <code>let()</code> statement for when a value needs to be used in multiple steps but we don't really care about what it is ( <code>let(:street_name){ 'Boulevard Acme' }</code>), and a lot of very small private methods translating those steps into method calls like these :</p>\n<pre><code class=\"ruby\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">i_go_to_my_dashboard</span></span>\n  navbar.visit_dashboard\n<span class=\"keyword\">end</span>\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">i_follow_the_email_annoucing_me_my_ticket_is_available</span></span>\n  last_email = mailbox_for(client.email).last\n  expect(last_email.subject).to eq <span class=\"constant\">I18n</span>.t(<span class=\"string\">\"ticket_mailer.available_ticket.subject\"</span>)\n  click_email_link_matching(%r<span class=\"string\">'my/tickets'</span>, last_email)\n<span class=\"keyword\">end</span>\n</code></pre>\n<p>Ok but where do those <code>as()</code>, <code>navbar</code>, <code>client</code>, ... methods come from ? You haven't told us everything !</p>\n<p>Not yet, but here come the best part ...</p>\n<h3>/spec/support</h3>\n<p>This folder contains all the supporting code for our examples, it will enable us to :</p>\n<ul>\n<li>Setup very easily the application in a complex state thanks to shared_contexts.</li>\n<li>Extend the Rspec DSL with some useful new keywords thanks to helpers (use them with caution).</li>\n<li>Override some behaviour in order to better isolate some components when we want to test them in isolation (testing a <code>User</code> record should require ActiveRecord, fair enough but not the complete Rails app juste because of Devise).</li>\n<li>Share page manipulation logic between multiple scenarios thanks to SitePrism page objects.</li>\n</ul>\n<h4>/spec/support/initializers</h4>\n<p>The first support subfolder we are going to create is <code>/spec/support/initializers</code>. The purpose of this folder is to mimic <code>/config/initializers</code> in the sense that all of its files will be loaded during the <em>boot</em> process of our app. Usually one puts RSpec configuration in <code>/spec/spec_helper.rb</code> and Rails specific RSpec configuration in <code>/spec/rails_helper.rb</code>. We do put RSpec configuration in <code>/spec/spec_helper.rb</code> but we split <code>/spec/spec_helper.rb</code> config in multiple files stored in <code>/spec/support/initializers</code> folder. This allows us to keep <code>/spec/rails_helper.rb</code> smaller, to have topic config files and to have other spec helper files loading only a subset of the initializers (typically we have an <code>/spec/activerecord_spec_helper</code> loading only what is required to test activerecord objects).</p>\n<p>Here is what a fresh project starts with most of the time :</p>\n<p><code>capybara.rb</code> : setup capybara and its drivers. We mostly uses poltergeist and rack-test drivers. we configure autoscreenshot upon failure and check ENV variables or metadate for diver overrides.</p>\n<pre><code class=\"ruby\">\n\n<span class=\"keyword\">require</span> <span class=\"string\">'launchy'</span>\n<span class=\"keyword\">require</span> <span class=\"string\">'capybara'</span>\n<span class=\"keyword\">require</span> <span class=\"string\">'capybara/poltergeist'</span>\n<span class=\"keyword\">require</span> <span class=\"string\">'capybara/rails'</span>\n<span class=\"keyword\">require</span> <span class=\"string\">'capybara/rspec'</span>\n<span class=\"keyword\">require</span> <span class=\"string\">'selenium-webdriver'</span>\n<span class=\"keyword\">require</span> <span class=\"string\">'capybara-screenshot'</span>\n<span class=\"keyword\">require</span> <span class=\"string\">'capybara-screenshot/rspec'</span>\n\n<span class=\"constant\">Capybara</span>.register_driver <span class=\"symbol\">:poltergeist</span> <span class=\"keyword\">do</span> |app|\n  <span class=\"constant\">Capybara::Poltergeist::Driver</span>.new(\n      app,\n      js_errors<span class=\"symbol\">:</span> <span class=\"keyword\">true</span>, \n      timeout<span class=\"symbol\">:</span> <span class=\"number\">180</span>, \n      debug<span class=\"symbol\">:</span> <span class=\"keyword\">false</span>, \n      window_size<span class=\"symbol\">:</span> [<span class=\"number\">1280</span>, <span class=\"number\">800</span>], \n      inspector<span class=\"symbol\">:</span> <span class=\"keyword\">false</span>, \n      phantomjs_options<span class=\"symbol\">:</span> [<span class=\"string\">'--ignore-ssl-errors=yes'</span>] ,\n      \n  )\n<span class=\"keyword\">end</span>\n\n\n<span class=\"constant\">Capybara</span>.register_driver <span class=\"symbol\">:chrome</span> <span class=\"keyword\">do</span> |app|\n  <span class=\"constant\">Capybara::Selenium::Driver</span>.new(app, <span class=\"symbol\">:browser</span> =&gt; <span class=\"symbol\">:chrome</span>)\n<span class=\"keyword\">end</span>\n\n\n<span class=\"constant\">Capybara</span>.register_driver <span class=\"symbol\">:firefox</span> <span class=\"keyword\">do</span> |app|\n  <span class=\"constant\">Capybara::Selenium::Driver</span>.new(app, <span class=\"symbol\">:browser</span> =&gt; <span class=\"symbol\">:firefox</span>)\n<span class=\"keyword\">end</span>\n\n\n<span class=\"constant\">Capybara</span>.javascript_driver = <span class=\"constant\">ENV</span>.fetch(<span class=\"string\">'DRIVER'</span>) { <span class=\"string\">'poltergeist'</span> }.to_sym\n<span class=\"constant\">Capybara</span>.asset_host = <span class=\"string\">'http://localhost:3000'</span> \n\n\n<span class=\"constant\">Capybara</span>.configure <span class=\"keyword\">do</span> |config|\n  config.default_selector = <span class=\"symbol\">:css</span>\n  config.default_max_wait_time= <span class=\"number\">2</span>\n  config.match = <span class=\"symbol\">:prefer_exact</span>\n  config.ignore_hidden_elements = <span class=\"keyword\">true</span>\n<span class=\"keyword\">end</span>\n\n[<span class=\"symbol\">:chrome</span>, <span class=\"symbol\">:firefox</span>, <span class=\"symbol\">:poltergeist</span>].each <span class=\"keyword\">do</span> |driver|\n  <span class=\"constant\">RSpec</span>.configure <span class=\"keyword\">do</span> |config|\n    config.around(<span class=\"symbol\">:each</span>, driver) <span class=\"keyword\">do</span> |example|\n      current_javascript_driver = <span class=\"constant\">Capybara</span>.javascript_driver\n      current_default_driver = <span class=\"constant\">Capybara</span>.default_driver\n      <span class=\"constant\">Capybara</span>.javascript_driver = driver\n      <span class=\"constant\">Capybara</span>.default_driver = driver\n      example.run\n      <span class=\"constant\">Capybara</span>.javascript_driver = current_javascript_driver\n      <span class=\"constant\">Capybara</span>.default_driver = current_default_driver\n    <span class=\"keyword\">end</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n\n\n<span class=\"constant\">Capybara</span>.save_and_open_page_path = <span class=\"constant\">Rails</span>.root.join(<span class=\"string\">'tmp'</span>, <span class=\"string\">'save_and_open_page'</span>)\n<span class=\"constant\">Capybara::Screenshot</span>.prune_strategy = { keep<span class=\"symbol\">:</span> <span class=\"number\">10</span> }\n\n<span class=\"constant\">Capybara::Screenshot</span>.register_driver(<span class=\"symbol\">:chrome</span>) <span class=\"keyword\">do</span> |driver, path|\n  driver.browser.save_screenshot path\n<span class=\"keyword\">end</span>\n</code></pre>\n<p><code>database_cleaner.rb</code> : We configure database cleaner in a very simple fashion in order to either use transaction strategy during activerecord and simple feature specs , or truncation during javascripted feature specs. This file is really project dependent and this example is a simple one. Usually we add here seed management: data coming from the seed are loaded once at the beginning and excluded from the cleaning process.</p>\n<pre><code class=\"ruby\">\n\n<span class=\"keyword\">require</span> <span class=\"string\">'database_cleaner'</span>\n\n<span class=\"constant\">RSpec</span>.configure <span class=\"keyword\">do</span> |config|\n\n  config.before(<span class=\"symbol\">:suite</span>) <span class=\"keyword\">do</span>\n    <span class=\"constant\">DatabaseCleaner</span>.strategy = <span class=\"symbol\">:transaction</span>\n    <span class=\"constant\">DatabaseCleaner</span>.clean_with <span class=\"symbol\">:truncation</span>\n  <span class=\"keyword\">end</span>\n\n\n  config.before(<span class=\"symbol\">:each</span>, type<span class=\"symbol\">:</span> <span class=\"symbol\">:feature</span>) <span class=\"keyword\">do</span>\n\n    driver_shares_db_connection_with_specs = <span class=\"constant\">Capybara</span>.current_driver == <span class=\"symbol\">:rack_test</span>\n\n    <span class=\"keyword\">if</span> driver_shares_db_connection_with_specs\n      <span class=\"constant\">DatabaseCleaner</span>.strategy = <span class=\"symbol\">:transaction</span>\n    <span class=\"keyword\">else</span>\n      <span class=\"constant\">DatabaseCleaner</span>.strategy = <span class=\"symbol\">:truncation</span>\n    <span class=\"keyword\">end</span>\n  <span class=\"keyword\">end</span>\n\n  config.before(<span class=\"symbol\">:each</span>) <span class=\"keyword\">do</span>\n    <span class=\"constant\">DatabaseCleaner</span>.start\n  <span class=\"keyword\">end</span>\n\n  config.append_after(<span class=\"symbol\">:each</span>) <span class=\"keyword\">do</span>\n    <span class=\"constant\">DatabaseCleaner</span>.clean\n  <span class=\"keyword\">end</span>\n\n<span class=\"keyword\">end</span>\n</code></pre>\n<p><code>factory_girl.rb</code> : We add a very small patch to factory girl allowing us to use file from the <code>spec/resources</code> folder. We use this in combination with <a href=\"https://github.com/carrierwaveuploader/carrierwave\">Carrierwave</a> uploaders.</p>\n<pre><code class=\"ruby\">\n<span class=\"keyword\">require</span> <span class=\"string\">'factory_girl'</span>\n\n<span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">FactoryGirl::SyntaxSugar</span></span>\n\n  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">resources_path</span><span class=\"params\">(*parts)</span></span>\n    <span class=\"constant\">Pathname</span>(<span class=\"constant\">File</span>.join(<span class=\"constant\">File</span>.realpath(__FILE_<span class=\"number\">_</span>), <span class=\"string\">'..'</span>, <span class=\"string\">'..'</span>, <span class=\"string\">'..'</span>, <span class=\"string\">'resources'</span>, *parts)).expand_path\n  <span class=\"keyword\">end</span>\n\n  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">resources_file</span><span class=\"params\">(*parts)</span></span>\n    <span class=\"constant\">File</span>.new resources_path(*parts)\n  <span class=\"keyword\">end</span>\n\n<span class=\"keyword\">end</span>\n<span class=\"constant\">FactoryGirl::SyntaxRunner</span>.<span class=\"keyword\">include</span> <span class=\"constant\">FactoryGirl::SyntaxSugar</span>\n\n<span class=\"constant\">RSpec</span>.configure <span class=\"keyword\">do</span> |config|\n  config.<span class=\"keyword\">include</span> <span class=\"constant\">FactoryGirl::Syntax::Methods</span>\n  config.<span class=\"keyword\">include</span> <span class=\"constant\">FactoryGirl::SyntaxSugar</span>\n\n  config.before(<span class=\"symbol\">:suite</span>) <span class=\"keyword\">do</span>\n    <span class=\"constant\">FactoryGirl</span>.factories.clear\n    <span class=\"constant\">FactoryGirl</span>.sequences.clear\n    <span class=\"constant\">FactoryGirl</span>.find_definitions\n  <span class=\"keyword\">end</span>\n\n<span class=\"keyword\">end</span>\n</code></pre>\n<p><code>site_prism.rb</code> : We add a patch to site prism allowing us to locate elements based on the data attribute <code>data-purpose</code>. This allows our team to work effectively between front and back developers. The backend developer must not rely on anything else than this attribute to locate an element. The front developer can change anything on the page but those attributes. It also enables us very effectively to not rely on - translateable - texts on the page.</p>\n<pre><code class=\"ruby\">\n<span class=\"keyword\">require</span> <span class=\"string\">'site_prism'</span>\n\n<span class=\"constant\">SitePrism</span>.configure <span class=\"keyword\">do</span> |config|\n  config.use_implicit_waits = <span class=\"keyword\">true</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"class\"><span class=\"keyword\">module</span>  <span class=\"title\">SitePrismExtension</span></span>\n\n  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">purpose_element</span><span class=\"params\">(purpose, **options)</span></span>\n    element purpose, %<span class=\"constant\">Q</span><span class=\"string\">'[data-purpose=\"<span class=\"subst\">#{purpose}</span>\"]'</span>, **options\n  <span class=\"keyword\">end</span>\n\n  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">purpose_elements</span><span class=\"params\">(purpose, elements_name=purpose.to_s.pluralize)</span></span>\n    elements elements_name, %<span class=\"constant\">Q</span><span class=\"string\">'[data-purpose=\"<span class=\"subst\">#{purpose}</span>\"]'</span>\n  <span class=\"keyword\">end</span>\n\n  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">purpose_section</span><span class=\"params\">(purpose, section_class)</span></span>\n    section purpose, section_class, %<span class=\"constant\">Q</span><span class=\"string\">'[data-purpose=\"<span class=\"subst\">#{purpose}</span>\"]'</span>\n  <span class=\"keyword\">end</span>\n\n  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">purpose_sections</span><span class=\"params\">(purpose, section_class, elements_name=purpose.to_s.pluralize)</span></span>\n    sections elements_name, section_class, %<span class=\"constant\">Q</span><span class=\"string\">'[data-purpose=\"<span class=\"subst\">#{purpose}</span>\"]'</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"constant\">SitePrism::Page</span>.send <span class=\"symbol\">:extend</span>, <span class=\"constant\">SitePrismExtension</span>\n<span class=\"constant\">SitePrism::Section</span>.send <span class=\"symbol\">:extend</span>, <span class=\"constant\">SitePrismExtension</span>\n</code></pre>\n<p>then we can add the following line in <code>spec/rails_helper.rb</code></p>\n<pre><code class=\"ruby\"><span class=\"constant\">Dir</span>[<span class=\"constant\">Rails</span>.root.join(<span class=\"string\">'spec/support/initializers/*.rb'</span>)].each { |f| <span class=\"keyword\">require</span> f }\n</code></pre>\n<h4>/spec/support/helpers</h4>\n<p>In an Object Oriented world, a function is something quite uncommon. Very often they are a bad idea, especially <em>helper</em> functions. This folder will nonetheless expose some of those functions. They won't be real functions but mostly extensions to objects already injected in some contexts.</p>\n<p>We usually use the following helpers :</p>\n<p><code>capybara_helpers.rb</code> : mostly acronyms because we are lazy and some method are way too long to be written when debugging. Also some component manipulation logic, in this example methods to use jquery-datetimepicker and select2 but you should change it to what you need.</p>\n<pre><code class=\"ruby\">\n\n<span class=\"keyword\">require</span> <span class=\"string\">'site_prism'</span>\n<span class=\"keyword\">require</span> <span class=\"string\">'capybara/rails'</span>\n<span class=\"keyword\">require</span> <span class=\"string\">'capybara/poltergeist'</span>\n\n<span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">Capybara::AliasHelper</span></span>\n\n  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snap</span></span>\n    screenshot_and_open_image\n  <span class=\"keyword\">end</span>\n\n  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">saop</span></span>\n    save_and_open_page\n  <span class=\"keyword\">end</span>\n\n  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">resources_path</span><span class=\"params\">(*parts)</span></span>\n    <span class=\"constant\">Pathname</span>(<span class=\"constant\">File</span>.join(<span class=\"constant\">File</span>.realpath(__FILE_<span class=\"number\">_</span>), <span class=\"string\">'..'</span>, <span class=\"string\">'..'</span>, <span class=\"string\">'..'</span>, <span class=\"string\">'resources'</span>, *parts)).expand_path\n  <span class=\"keyword\">end</span>\n\n<span class=\"keyword\">end</span>\n\n<span class=\"class\"><span class=\"keyword\">module</span>  <span class=\"title\">Capybara::ComplexInputsHelpers</span></span>\n\n  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pick_date</span><span class=\"params\">(value, element)</span></span>\n    element.set(value.to_s)\n    <span class=\"keyword\">if</span> <span class=\"constant\">Capybara</span>.current_driver != <span class=\"symbol\">:rack_test</span> &amp;&amp; element[<span class=\"string\">'id'</span>].present?\n      execute_script(%<span class=\"constant\">Q</span>|<span class=\"variable\">$(</span><span class=\"string\">'#<span class=\"subst\">#{element[<span class=\"string\">'id'</span>]}</span>'</span>).datetimepicker(<span class=\"string\">'hide'</span>)|)\n      sleep(<span class=\"number\">0</span>.<span class=\"number\">2</span>)\n    <span class=\"keyword\">end</span>\n  <span class=\"keyword\">end</span>\n\n  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select_from_select2</span><span class=\"params\">(value, select_container)</span></span>\n    select_container.find(<span class=\"string\">\".select2-selection\"</span>).click \n    find(<span class=\"string\">\".select2-search__field\"</span>).set(value) \n    find(<span class=\"string\">\"li.select2-results__option--highlighted\"</span>).click \n    element_does_not_exist?(<span class=\"string\">\"li.select2-results__option--highlighted\"</span>)\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"constant\">RSpec</span>.configure { |c| c.<span class=\"keyword\">include</span> <span class=\"constant\">Capybara::AliasHelper</span> }\n<span class=\"constant\">RSpec</span>.configure { |c| c.<span class=\"keyword\">include</span> <span class=\"constant\">Capybara::ComplexInputsHelpers</span> }\n\n<span class=\"constant\">SitePrism::Page</span>.send <span class=\"symbol\">:include</span>, <span class=\"constant\">Capybara::AliasHelper</span>\n<span class=\"constant\">SitePrism::Page</span>.send <span class=\"symbol\">:include</span>, <span class=\"constant\">Capybara::ComplexInputsHelpers</span>\n<span class=\"constant\">SitePrism::Section</span>.send <span class=\"symbol\">:include</span>, <span class=\"constant\">Capybara::AliasHelper</span>\n<span class=\"constant\">SitePrism::Section</span>.send <span class=\"symbol\">:include</span>, <span class=\"constant\">Capybara::ComplexInputsHelpers</span>\n</code></pre>\n<p><code>page_objects_helper.rb</code>: As explained in the previous article, we use SitePrism to write page objects. Those page objects are stateless and therefore a feature spec shouldn't care about their instantiation. We use this file to expose each page object through its own private method and use memoization to be gain a small performance optimization.</p>\n<p>We use the Memoist gem to do the job , not because we are too lazy to do the code by ourselve but because we like the idea of separated responsibility and memoization is a performance responsibility different than the business logic it applies to. So we think using the <code>memoize</code> macro describe better our intent than doing the memoization by hand.</p>\n<pre><code class=\"ruby\">\n<span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">PageObjectsHelper</span></span>\n  extend <span class=\"constant\">Memoist</span>\n\n  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\"><span class=\"keyword\">self</span></span>.<span class=\"title\">page_object</span><span class=\"params\">(helper_method, page_class)</span></span>\n    define_method(helper_method) <span class=\"keyword\">do</span>\n      page_class.new\n    <span class=\"keyword\">end</span>\n    memoize helper_method\n  <span class=\"keyword\">end</span>\n\n  page_object <span class=\"symbol\">:navbar</span>, <span class=\"constant\">Spec::Pages::Navbar</span>\n  page_object <span class=\"symbol\">:home_page</span>, <span class=\"constant\">Spec::Pages::HomePage</span>\n  page_object <span class=\"symbol\">:login_page</span>, <span class=\"constant\">Spec::Pages::LoginPage</span>\n  \n<span class=\"keyword\">end</span>\n\n\n<span class=\"constant\">RSpec</span>.configure { |c| c.<span class=\"keyword\">include</span> <span class=\"constant\">PageObjectsHelper</span>, type<span class=\"symbol\">:</span> <span class=\"symbol\">:feature</span> }\n</code></pre>\n<p><code>usual_steps_helper.rb</code> : the magic <code>as()</code> helper. The code might need change in your project but it's almost certain that you have scenario requiring someone to be logged in - or multiple persons. The point here is to separate everyone in its own session and leveraging the login_page login to do the authentication.</p>\n<p>If you have blank screenshots when using this snippet, ensure you use a version of capybara-screenshot including this fix : https://github.com/mattheworiordan/capybara-screenshot/pull/132</p>\n<pre><code class=\"ruby\">\n\n<span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">UsualStepsHelper</span></span>\n\n  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">as</span><span class=\"params\">(user, options={})</span></span>\n    experimental = options[<span class=\"symbol\">:experimental</span>] || <span class=\"keyword\">false</span>\n    session_name = <span class=\"string\">\"capybara_session_for_<span class=\"subst\">#{user.to_param}</span>\"</span>\n    using_session(session_name) <span class=\"keyword\">do</span>\n      visit new_user_session_path\n      login_page.login user.email, user.password\n      force_experimental_cookie <span class=\"keyword\">if</span> experimental\n      <span class=\"keyword\">yield</span>\n      navbar.logout\n    <span class=\"keyword\">end</span>\n  <span class=\"keyword\">end</span>\n\n  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">as_guest</span></span>\n    session_name = <span class=\"string\">\"capybara_session_for_guest-<span class=\"subst\">#{rand(<span class=\"number\">1_000_000</span>)}</span>\"</span>\n    using_session(session_name) <span class=\"keyword\">do</span>\n      visit <span class=\"string\">'/'</span>\n      <span class=\"keyword\">yield</span>\n    <span class=\"keyword\">end</span>\n  <span class=\"keyword\">end</span>\n\n<span class=\"keyword\">end</span>\n\n<span class=\"constant\">RSpec</span>.configure { |c| c.<span class=\"keyword\">include</span> <span class=\"constant\">UsualStepsHelper</span>, type<span class=\"symbol\">:</span> <span class=\"symbol\">:feature</span> }\n</code></pre>\n<h4>/spec/support/overrides</h4>\n<p>The last folder contains the most problematic kind of code, patches. When writing tests, you typically want to assert how your code is behaving. Monkey patching your code in a test environment means you are asserting a different behaviour than the normal one, thus missing the entire point of the test.</p>\n<p><em>BUT</em></p>\n<p>In some circumstances, testing the real behaviour is not your responsibility, and you should not do it. I'm talking about when the use of a library or framework asks you to write some code in your object making it a slave of two masters : You and the library writer.</p>\n<p>In those cases, you might want to patch your object to drop its relation to the library in order to test only the behaviour you have designed. It's a fragile thing since you're not testing the real object but it might still make sense when integrating tools from which an isolation layer is really hard and/or stupid to write.</p>\n<p>One of those cases is Devise.</p>\n<p>When testing a User object, or an object graph containing a User instance, We very often do not want anything Devise related. Devise is meant to be integrated directly into the User class code and in Order to remove it, we use the following patch :</p>\n<pre><code class=\"ruby\">\n\n<span class=\"keyword\">require</span> <span class=\"string\">'active_record'</span>\n\n<span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">DeviseInhibitor</span></span>\n  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">devise</span><span class=\"params\">(*whatever)</span></span>\n    attr_accessor <span class=\"symbol\">:password</span>, <span class=\"symbol\">:password_confirmation</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"constant\">ActiveRecord::Base</span>.singleton_class.prepend <span class=\"constant\">DeviseInhibitor</span>\n</code></pre>\n<p>Then we require this specific file in the example file.</p>\n<p>When using such overrides , we always require them manually so it's very explicit that the test is against a slightly drifted variation of the code.</p>\n<p>We already have used this technique with gems like geocoder, too which has the same integration pattern as devise.</p>\n<h3>/spec/support/shared_contexts</h3>\n<p>This folder is simply where we put globally known shared contexts. When a shared context is meant to be used in any kind of feature spec (like \"Users with different roles exists\", or \"A concert will happen next week\") we put the file here. We use shared_contexts as a kind of very powerful data fixtures : creating data and helper methods to access those data.</p>\n<p>Here is an example following the previous feature spec example. including this context create the expected records and allows us to use the <code>let</code> statement to access the data easily.</p>\n<pre><code class=\"ruby\">\n\n<span class=\"constant\">RSpec</span>.shared_context <span class=\"string\">'a ticket has been bought using bank transfer'</span> <span class=\"keyword\">do</span>\n\n  let(<span class=\"symbol\">:ticket_concert</span>){ fail <span class=\"string\">\"please define the concert for which this ticket has been bought\"</span> }\n  let(<span class=\"symbol\">:ticket_buyer</span>){ fail <span class=\"string\">\"please define the user who has bought the ticket\"</span> }\n\n\n  let(<span class=\"symbol\">:ticket_price</span>){ <span class=\"number\">100</span> }\n  let(<span class=\"symbol\">:vip_kind</span>){ <span class=\"constant\">TickeType</span>.vip } \n\n  let!(<span class=\"symbol\">:ticket_transaction</span>) <span class=\"keyword\">do</span>\n    \n    create(<span class=\"symbol\">:ticket_transaction</span>, \n      <span class=\"symbol\">:bank_transfer</span>, \n      <span class=\"symbol\">:pending</span>\n      issued_at<span class=\"symbol\">:</span> <span class=\"number\">3</span>.days.ago\n      ....\n    )\n  <span class=\"keyword\">end</span>\n\n  let!(<span class=\"symbol\">:ticket</span>) <span class=\"keyword\">do</span>\n    \n    create(<span class=\"symbol\">:ticket</span>, \n      <span class=\"symbol\">:signed</span>, \n      user<span class=\"symbol\">:</span> ticket_buyer,\n      concert<span class=\"symbol\">:</span> ticket_concert,\n      price<span class=\"symbol\">:</span> ticket_price,\n      transaction<span class=\"symbol\">:</span> ticket_transaction,\n      ....\n    )\n  <span class=\"keyword\">end</span>\n\n\n<span class=\"keyword\">end</span>\n</code></pre>\n<h3>/spec/spec<em>helper.rb, /spec/rails</em>helper.rb, /spec/activerecord_spec.rb</h3>\n<p><code>/spec/spec_helper.rb</code> is the smallest, fastest initializer we can write for rspec. We use all the recommanded default setting, and add just 3 additional things :</p>\n<ul>\n<li><a href=\"https://github.com/rspec/rspec-collection_matchers\">Collection Matchers</a> : Because we like their expressivity very much, and since all our rspec related gems are <code>require =&gt; false</code> in our gemfile , we require them here.</li>\n<li>Auto looading of usual rails files : Even when we do not start Rails we like being able to benefit from the autoloading of constants from files in the <code>app</code> directory.</li>\n<li>Defaulting the time zone : Because we have found the hard way that problems coming from machines having different default time zones are a pain to discover.</li>\n</ul>\n<p>So here is what we add to the default file :</p>\n<pre><code class=\"ruby\">\n<span class=\"keyword\">require</span> <span class=\"string\">'rspec/collection_matchers'</span>\n\n<span class=\"keyword\">require</span> <span class=\"string\">'active_support'</span>\n<span class=\"keyword\">require</span> <span class=\"string\">'active_support/core_ext'</span>\n<span class=\"keyword\">require</span> <span class=\"string\">'active_support/dependencies'</span>\n\n<span class=\"constant\">Dir</span>[<span class=\"constant\">File</span>.join(<span class=\"constant\">File</span>.dirname(__FILE_<span class=\"number\">_</span>), <span class=\"string\">'..'</span>, <span class=\"string\">'app'</span>, <span class=\"string\">'models'</span>)].each { |f| <span class=\"constant\">ActiveSupport::Dependencies</span>.autoload_paths &lt;&lt; f }\n<span class=\"constant\">Dir</span>[<span class=\"constant\">File</span>.join(<span class=\"constant\">File</span>.dirname(__FILE_<span class=\"number\">_</span>), <span class=\"string\">'..'</span>, <span class=\"string\">'app'</span>, <span class=\"string\">'*'</span>)].each { |f| <span class=\"constant\">ActiveSupport::Dependencies</span>.autoload_paths &lt;&lt; f }\n<span class=\"constant\">Dir</span>[<span class=\"constant\">File</span>.join(<span class=\"constant\">File</span>.dirname(__FILE_<span class=\"number\">_</span>), <span class=\"string\">'..'</span>, <span class=\"string\">'app'</span>, <span class=\"string\">'*'</span>, <span class=\"string\">'concerns'</span>)].each { |f| <span class=\"constant\">ActiveSupport::Dependencies</span>.autoload_paths &lt;&lt; f }\n\n<span class=\"constant\">Time</span>.zone_default= <span class=\"constant\">Time</span>.find_zone!(<span class=\"string\">'UTC'</span>)\n</code></pre>\n<p><code>/spec/rails_helper.rb</code> is the heaviest, initializer we can write for rspec. It boots the entire rails application and is used for feature spec. We load some rspec extensions we only have meaning for those kind of specs (i.e. webmock), and we load all the files described above (except the overrides of course).</p>\n<p>We also set the default rails application locale, in order to be sure that the test process and the server process have the same default. So here is our file :</p>\n<pre><code class=\"ruby\">\n\n<span class=\"constant\">ENV</span>[<span class=\"string\">'RAILS_ENV'</span>] ||= <span class=\"string\">'test'</span>\n\n<span class=\"keyword\">require</span> <span class=\"string\">'spec_helper'</span>\n<span class=\"keyword\">require</span> <span class=\"constant\">File</span>.expand_path(<span class=\"string\">'../../config/environment'</span>, __FILE_<span class=\"number\">_</span>)\n<span class=\"keyword\">require</span> <span class=\"string\">'rspec/rails'</span>\n\n<span class=\"keyword\">require</span> <span class=\"string\">'webmock'</span>\n<span class=\"keyword\">require</span> <span class=\"string\">'webmock/rspec'</span>\n<span class=\"constant\">WebMock</span>.disable_net_connect!(<span class=\"symbol\">:allow_localhost</span> =&gt; <span class=\"keyword\">true</span>)\n\n\n<span class=\"constant\">Dir</span>[<span class=\"constant\">Rails</span>.root.join(<span class=\"string\">'spec/support/initializers/*.rb'</span>)].each { |f| <span class=\"keyword\">require</span> f }\n<span class=\"constant\">Dir</span>[<span class=\"constant\">Rails</span>.root.join(<span class=\"string\">'spec/support/pages/**/*.rb'</span>)].each { |f| <span class=\"keyword\">require</span> f }\n<span class=\"constant\">Dir</span>[<span class=\"constant\">Rails</span>.root.join(<span class=\"string\">'spec/support/helpers/*.rb'</span>)].each { |f| <span class=\"keyword\">require</span> f }\n<span class=\"constant\">Dir</span>[<span class=\"constant\">Rails</span>.root.join(<span class=\"string\">'spec/support/shared_contexts/*.rb'</span>)].each { |f| <span class=\"keyword\">require</span> f }\n\n<span class=\"constant\">ActiveRecord::Migration</span>.maintain_test_schema!\n\n<span class=\"constant\">RSpec</span>.configure <span class=\"keyword\">do</span> |config|\n  config.use_transactional_fixtures = <span class=\"keyword\">false</span>\n  config.infer_spec_type_from_file_location!\n<span class=\"keyword\">end</span>\n\n<span class=\"constant\">I18n</span>.locale= <span class=\"symbol\">:fr</span>\n</code></pre>\n<p><code>/spec/activerecord_spec.rb</code> is a custom helper for testing objects in almost isolation. We use a lot of plain old ruby objects in our apps but we do not want to completely isolate activerecord form the rest of the app only because it is tightly tied to a third party library. We accept this bound and follow the active record pattern : adding behaviour to objects representing database records. But then we need to test them of course and this doesn't mean we want to load the entire rails application with its routing, controllers, views, assets, etc.</p>\n<p>This is why we have this third helper :</p>\n<pre><code class=\"ruby\">\n<span class=\"keyword\">require</span> <span class=\"string\">'spec_helper'</span>\n\n<span class=\"keyword\">require</span> <span class=\"string\">'active_record'</span>\n<span class=\"keyword\">require</span> <span class=\"string\">'factory_girl'</span>\n<span class=\"keyword\">require</span> <span class=\"string\">'yaml'</span>\n\ndb_configurations = <span class=\"constant\">YAML::</span>load(<span class=\"constant\">ERB</span>.new(<span class=\"constant\">File</span>.read(<span class=\"string\">\"config/database.yml\"</span>)).result)\n\n<span class=\"constant\">ActiveRecord::Base</span>.send(<span class=\"symbol\">:configurations</span>=, db_configurations)\n<span class=\"constant\">ActiveRecord::Base</span>.establish_connection(<span class=\"symbol\">:test</span>)\n\nrequire_relative <span class=\"string\">\"support/initializers/factory_girl\"</span>\nrequire_relative <span class=\"string\">\"support/initializers/database_cleaner\"</span>\n\nrequire_relative <span class=\"string\">'support/overrides/devise'</span>\n</code></pre>\n<h2>Conclusion</h2>\n<p>This one is a long post but we hope you will find it interesting not only to understand the way we organize our files but also the real code we use. Those files are the result of a long path of small improvements and are in perpetual changes. There hasn't been any major change in the structure for a long time but every project we work on brings its new contraints and solutions.</p>\n<p>See you soon for the next and last article, <em>The flow</em>, where we will explain how we go from test to code and vice versa.</p>\n<p>Update : The next and last part is ready, you can find it <strong><a href=\"http://belighted.com/blog/how-we-test-our-rails-projects-3-3\">here</a></strong></p>\n<p><!--HubSpot Call-to-Action Code --><span class=\"hs-cta-wrapper\" id=\"hs-cta-wrapper-fb3606cc-cc1b-47d0-ae85-2c9f69837fe2\"><span class=\"hs-cta-node hs-cta-fb3606cc-cc1b-47d0-ae85-2c9f69837fe2\" id=\"hs-cta-fb3606cc-cc1b-47d0-ae85-2c9f69837fe2\"><!--[if lte IE 8]><div id=\"hs-cta-ie-element\"></div><![endif]--><a href=\"https://cta-redirect.hubspot.com/cta/redirect/1684659/fb3606cc-cc1b-47d0-ae85-2c9f69837fe2\" target=\"_blank\"><img class=\"hs-cta-img\" id=\"hs-cta-img-fb3606cc-cc1b-47d0-ae85-2c9f69837fe2\" src=\"https://no-cache.hubspot.com/cta/default/1684659/fb3606cc-cc1b-47d0-ae85-2c9f69837fe2.png\" alt=\"New Call-to-action\"></a></span></span><!-- end HubSpot Call-to-Action Code --></p></span>"
  textBody: ""
  html: "<!--<![endif]--><head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"author\" content=\"Philippe V.\">\n    <meta name=\"description\" content=\"Second of a series of 3 articles about how we write automatic tests for our rails projects. \nThis article focuses on the supporting code we wrote.\n\">\n    <meta name=\"generator\" content=\"HubSpot\">\n    <title>How we test our Rails projects (2/3)</title>\n    <link rel=\"shortcut icon\" href=\"https://www.belighted.com/hubfs/logo-belighted.png\">\n    \n\n    \n\n    <meta property=\"og:description\" content=\"Second of a series of 3 articles about how we write automatic tests for our rails projects. \nThis article focuses on the supporting code we wrote.\n\">\n    <meta property=\"og:title\" content=\"How we test our Rails projects (2/3)\">\n    <meta name=\"twitter:description\" content=\"Second of a series of 3 articles about how we write automatic tests for our rails projects. \nThis article focuses on the supporting code we wrote.\n\">\n    <meta name=\"twitter:title\" content=\"How we test our Rails projects (2/3)\">\n\n\n    <style>\na.cta_button{-moz-box-sizing:content-box !important;-webkit-box-sizing:content-box !important;box-sizing:content-box !important;vertical-align:middle}.hs-breadcrumb-menu{list-style-type:none;margin:0px 0px 0px 0px;padding:0px 0px 0px 0px}.hs-breadcrumb-menu-item{float:left;padding:10px 0px 10px 10px}.hs-breadcrumb-menu-divider:before{content:'›';padding-left:10px}.hs-featured-image-link{border:0}.hs-featured-image{float:right;margin:0 0 20px 20px;max-width:50%}@media (max-width: 568px){.hs-featured-image{float:none;margin:0;width:100%;max-width:100%}}.hs-screen-reader-text{clip:rect(1px, 1px, 1px, 1px);height:1px;overflow:hidden;position:absolute !important;width:1px}\n</style>\n\n<link rel=\"stylesheet\" href=\"/hs/hsstatic/AsyncSupport/static-1.70/sass/comments_listing_asset.css\">\n<link rel=\"stylesheet\" href=\"/hs/hsstatic/AsyncSupport/static-1.70/sass/rss_post_listing.css\">\n    \n\n    \n    \n\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n\n<!-- Facebook Pixel Code -->\n\n<noscript>&lt;img  height=\"1\" width=\"1\" style=\"display:none\" src=\"https://www.facebook.com/tr?id=706355809571598&amp;amp;ev=PageView&amp;amp;noscript=1\"&gt;</noscript>\n<!-- End Facebook Pixel Code -->\n<link rel=\"amphtml\" href=\"https://www.belighted.com/blog/how-we-test-our-rails-projects-2-3?hs_amp=true\">\n\n<meta property=\"og:image\" content=\"http://belighted.com/images/default_blogpost_image_7@1x.jpg#keepProtocol\">\n\n<meta name=\"twitter:image\" content=\"http://belighted.com/images/default_blogpost_image_7@1x.jpg#keepProtocol\">\n\n\n<meta property=\"og:url\" content=\"https://www.belighted.com/blog/how-we-test-our-rails-projects-2-3\">\n<meta name=\"twitter:card\" content=\"summary\">\n\n<link rel=\"canonical\" href=\"https://www.belighted.com/blog/how-we-test-our-rails-projects-2-3\">\n\n<meta property=\"og:type\" content=\"article\">\n<link rel=\"alternate\" type=\"application/rss+xml\" href=\"https://www.belighted.com/blog/rss.xml\">\n<meta name=\"twitter:domain\" content=\"www.belighted.com\">\n\n\n<meta http-equiv=\"content-language\" content=\"en\">\n<link rel=\"stylesheet\" href=\"//cdn2.hubspot.net/hub/-1/hub_generated/template_assets/1495141902003/hubspot_default/shared/responsive/layout.min.css\">\n\n\n<link rel=\"stylesheet\" href=\"https://www.belighted.com/hs-fs/hub/1684659/hub_generated/template_assets/8523445462/1569881984337/Marketplace/Neambo/Act21/Coded_Files/Act21.min.css\">\n\n\n\n\n</head>\n<body class=\"blog-1 featured-image-right   hs-content-id-4747398833 hs-blog-post hs-blog-id-4544204069\" style=\"\"></body>"
